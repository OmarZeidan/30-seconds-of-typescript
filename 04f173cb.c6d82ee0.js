(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{466:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=a.a.createContext({}),l=function(e){var t=a.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},u=function(e){var t=l(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=l(n),d=r,m=u["".concat(i,".").concat(d)]||u[d]||b[d]||o;return n?a.a.createElement(m,p(p({ref:t},s),{},{components:n})):a.a.createElement(m,p({ref:t},s))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var p={};for(var c in t)hasOwnProperty.call(t,c)&&(p[c]=t[c]);p.originalType=e,p.mdxType="string"==typeof e?e:r,i[1]=p;for(var s=2;s<o;s++)i[s]=n[s];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},65:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return p})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return l}));var r=n(2),a=n(6),o=(n(0),n(466)),i={title:"unzipWith",tags:"array,function,advanced"},p={unversionedId:"unzipWith",id:"unzipWith",isDocsHomePage:!1,title:"unzipWith",description:"TS",source:"@site/docs/unzipWith.md",permalink:"/30-seconds-of-typescript/docs/unzipWith",editUrl:"https://github.com/deepakshrma/30-seconds-of-typescript/edit/master/docs/unzipWith.md",sidebar:"someSidebar",previous:{title:"unzip",permalink:"/30-seconds-of-typescript/docs/unzip"},next:{title:"URLJoin",permalink:"/30-seconds-of-typescript/docs/URLJoin"}},c=[],s={rightToc:c};function l(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,Object(o.b)("img",Object(r.a)({parentName:"p"},{src:"https://img.shields.io/badge/supports-typescript-blue.svg?style=flat-square",alt:"TS"})),"\n",Object(o.b)("img",Object(r.a)({parentName:"p"},{src:"https://img.shields.io/badge/supports-javascript-yellow.svg?style=flat-square",alt:"JS"})),"\n",Object(o.b)("img",Object(r.a)({parentName:"p"},{src:"https://img.shields.io/badge/supports-deno-green.svg?style=flat-square",alt:"Deno"}))),Object(o.b)("p",null,"Creates an array of elements, ungrouping the elements in an array produced by ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"#zip"}),"zip")," and applying the provided function."),Object(o.b)("p",null,"Note: Provide size to make calculation faster"),Object(o.b)("p",null,"Use ",Object(o.b)("inlineCode",{parentName:"p"},"Math.max.apply()")," to get the longest subarray in the array, ",Object(o.b)("inlineCode",{parentName:"p"},"Array.prototype.map()")," to make each element an array.\nUse ",Object(o.b)("inlineCode",{parentName:"p"},"Array.prototype.reduce()")," and ",Object(o.b)("inlineCode",{parentName:"p"},"Array.prototype.forEach()")," to map grouped values to individual arrays.\nUse ",Object(o.b)("inlineCode",{parentName:"p"},"Array.prototype.map()")," and the spread operator (",Object(o.b)("inlineCode",{parentName:"p"},"..."),") to apply ",Object(o.b)("inlineCode",{parentName:"p"},"fn")," to each individual group of elements."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"const unzipWith = (arr: any[], fn: Function, size = 0) =>\n  arr\n    .reduce(\n      (acc, val) => (val.forEach((v: any, i: number) => acc[i].push(v)), acc),\n      Array.from({\n        length: size || Math.max(...arr.map((x) => x.length)),\n      }).map((x) => [])\n    )\n    .map((val: any) => fn(...val));\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts",metastring:'title="typescript"',title:'"typescript"'}),"unzipWith(\n  [\n    [1, 10, 100],\n    [2, 20, 200],\n  ],\n  (...args) => args.reduce((acc, v) => acc + v, 0)\n); // [3, 30, 300]\nunzipWith(\n  [\n    [1, 10, 100],\n    [2, 20, 200],\n  ],\n  (...args) => args.reduce((acc, v) => acc + v, 0),\n  3\n); // [3, 30, 300]\n")))}l.isMDXComponent=!0}}]);